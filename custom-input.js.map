{"version":3,"file":"custom-input.js","sourceRoot":"","sources":["src/custom-input.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAEnE;;;;;;;GAOG;AAEH,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,UAAU;IAA3C;;QAuBE,mCAAmC;QACvB,UAAK,GAAG,EAAE,CAAC;IA2BzB,CAAC;IAzBC,WAAW;QACT,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;;;;;;;mBAQI,IAAI,CAAC,KAAK;mBACV,IAAI,CAAC,WAAW;;yBAEV,IAAI,CAAC,gBAAgB;;KAEzC,CAAC;IACJ,CAAC;CACF,CAAA;AAlDiB,kBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;GAiB1B,CAAA;AAGF;IADC,KAAK,CAAC,uBAAuB,CAAC;0CACN;AAGb;IAAX,QAAQ,EAAE;0CAAY;AAxBZ,WAAW;IADvB,aAAa,CAAC,cAAc,CAAC;GACjB,WAAW,CAmDvB;SAnDY,WAAW","sourcesContent":["import { LitElement, html, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators.js\";\n\n/**\n * An example custom input element.\n *\n * @slot label - The input's label.\n * @fires input - Emitted when the control's value changes.\n * @fires clear - Emitted when the clear button is activated.\n * @csspart label - The input's label.\n */\n@customElement(\"custom-input\")\nexport class CustomInput extends LitElement {\n  static override styles = css`\n    :host {\n      --height: 40px;\n\n      display: flex;\n      flex-direction: column;\n      gap: 6px;\n    }\n\n    .input-wrapper {\n      display: flex;\n      gap: 6px;\n    }\n\n    input {\n      height: var(--height);\n    }\n  `;\n\n  @query(\"#custom-input-control\")\n  input!: HTMLInputElement;\n\n  /** The input's value attribute. */\n  @property() value = \"\";\n\n  handleInput(): void {\n    this.value = this.input.value;\n    this.dispatchEvent(new CustomEvent(\"value-changed\"));\n  }\n\n  handleClearClick(): void {\n    this.value = \"\";\n  }\n\n  override render() {\n    return html`\n      <label part=\"label\" for=\"custom-input-control\">\n        <slot name=\"label\"></slot>\n      </label>\n\n      <div class=\"input-wrapper\">\n        <input\n          id=\"custom-input-control\"\n          .value=${this.value}\n          @input=${this.handleInput}\n        />\n        <button @click=${this.handleClearClick}>Clear Value</button>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"custom-input\": CustomInput;\n  }\n}\n"]}